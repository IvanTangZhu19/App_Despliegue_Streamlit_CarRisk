# -*- coding: utf-8 -*-
"""5.1 Despliegue_Car_Risk_con_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_-7MeaBiBUmj4mIOO3b9AqKrumjvQ7TG

# Despliegue

- Cargamos el modelo
- Cargamos los datos futuros
- Preparar los datos futuros
- Aplicamos el modelo para la predicción
"""

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

#Cargamos el modelo
import pickle
filename = 'modelo.pkl'
modelTree,model_rf,modelKnn,modelNN,modelSVM, labelencoder,variables,min_max_scaler = pickle.load(open(filename, 'rb'))

#modelTree,modelKnn,modelNN, labelencoder,variables,min_max_scaler = pickle.load(open(filename, 'rb'))

#Cargamos los datos futuros
data = pd.read_csv("carRisk-future.csv")
data.head()

#Se crea interfaz gráfica con streamlit para captura de los datos
#Esto no se ejecuta aqui
import streamlit as st

st.title('Predicción de Riesgo de autos')

Edad = st.slider('Edad', min_value=14, max_value=52, value=20, step=1)
Tipo_Carro = st.selectbox('cartype', ["combi", "sport", "family", "minivan"])

#Dataframe
datos = [[Edad, Tipo_Carro]]
data = pd.DataFrame(datos, columns=['Edad', 'cartype']) #Dataframe con los mismos nombres de variables

#Se realiza la preparación debe ser igual al aprendizaje
data_preparada=data.copy()
data_preparada = pd.get_dummies(data_preparada, columns=['cartype'], drop_first=False, dtype=int) #Despliegue siempre drop_first en false
data_preparada.head()

#Se adicionan las columnas faltantes
data_preparada=data_preparada.reindex(columns=variables,fill_value=0)
data_preparada.head()

"""# **Predicciones**"""

#Hacemos la predicción con el Tree
Y_fut = modelTree.predict(data_preparada)
print(Y_fut)

print(labelencoder.inverse_transform(Y_fut)) # Devuelve a los nombre originales

data['Tree']=labelencoder.inverse_transform(Y_fut)
data.head()

#Hacemos la predicción con Ranfom Forest
Y_fut = model_rf.predict(data_preparada)
data['RF']=labelencoder.inverse_transform(Y_fut)
data.head()

#Normalización para los metodos Knn, RN y SVM
data_preparada[['age']]= min_max_scaler.transform(data_preparada[['age']])
data_preparada.head()

#Hacemos la predicción con Knn
Y_fut = modelKnn.predict(data_preparada)
data['Knn']=labelencoder.inverse_transform(Y_fut)
data.head()

#Hacemos la predicción con Red Neuronal
Y_fut = modelNN.predict(data_preparada)
data['Neural_Network']=labelencoder.inverse_transform(Y_fut)
data.head()

#Hacemos la predicción con SVM
Y_fut = modelSVM.predict(data_preparada)
data['SVM']=labelencoder.inverse_transform(Y_fut)
print(data)

data